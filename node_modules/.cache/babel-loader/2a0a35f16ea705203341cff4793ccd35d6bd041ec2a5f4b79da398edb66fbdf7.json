{"ast":null,"code":"var _jsxFileName = \"/Users/tarun/Documents/Table/my-react-app/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState } from 'react';\nimport { Table, MantineProvider, Switch } from '@mantine/core';\nimport data from './data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getMaxMinProductionByYear = data => {\n  const years = Array.from(new Set(data.map(item => item.Year)));\n  const results = [];\n  years.forEach(year => {\n    const cropsInYear = data.filter(item => item.Year === year);\n    const cropsWithProduction = cropsInYear.filter(crop => crop[\"Crop Production (UOM:t(Tonnes))\"] !== \"\");\n    if (cropsWithProduction.length === 0) {\n      results.push({\n        Year: year,\n        MaxCrop: \"N/A\",\n        MinCrop: \"N/A\"\n      });\n      return;\n    }\n    let onlyYear = year.split(\",\")[1].trim();\n    const maxCrop = cropsWithProduction.reduce((prev, curr) => prev[\"Crop Production (UOM:t(Tonnes))\"] > curr[\"Crop Production (UOM:t(Tonnes))\"] ? prev : curr);\n    const minCrop = cropsWithProduction.reduce((prev, curr) => prev[\"Crop Production (UOM:t(Tonnes))\"] < curr[\"Crop Production (UOM:t(Tonnes))\"] ? prev : curr);\n    results.push({\n      Year: onlyYear,\n      MaxCrop: maxCrop[\"Crop Name\"],\n      MinCrop: minCrop[\"Crop Name\"]\n    });\n  });\n  return results;\n};\nconst calculateAverages = data => {\n  const cropAverages = {};\n  data.forEach(item => {\n    const cropName = item['Crop Name'];\n    const yieldValue = item['Yield Of Crops (UOM:Kg/Ha(KilogramperHectare))'];\n    const areaValue = item['Area Under Cultivation (UOM:Ha(Hectares))'];\n    if (!cropAverages[cropName]) {\n      cropAverages[cropName] = {\n        yieldSum: 0,\n        yieldCount: 0,\n        areaSum: 0,\n        areaCount: 0\n      };\n    }\n    if (yieldValue) {\n      cropAverages[cropName].yieldSum += yieldValue;\n      cropAverages[cropName].yieldCount += 1;\n    }\n    if (areaValue) {\n      cropAverages[cropName].areaSum += areaValue;\n      cropAverages[cropName].areaCount += 1;\n    }\n  });\n  return Object.keys(cropAverages).map(crop => {\n    const averages = cropAverages[crop];\n    return {\n      cropName: crop,\n      averageYield: averages.yieldCount ? averages.yieldSum / averages.yieldCount : 0,\n      averageArea: averages.areaCount ? averages.areaSum / averages.areaCount : 0\n    };\n  });\n};\nfunction App() {\n  _s();\n  const maxMinProduction = getMaxMinProductionByYear(data);\n  const cropAverages = calculateAverages(data);\n  const [showTables, setShowTables] = useState(false);\n  console.log(showTables);\n  const maxMinProductionData = maxMinProduction.map(element => /*#__PURE__*/_jsxDEV(Table.Tr, {\n    children: [/*#__PURE__*/_jsxDEV(Table.Td, {\n      children: element.Year\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table.Td, {\n      children: element.MaxCrop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table.Td, {\n      children: element.MinCrop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, element.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this));\n  const cropAveragesData = cropAverages.map(element => /*#__PURE__*/_jsxDEV(Table.Tr, {\n    children: [/*#__PURE__*/_jsxDEV(Table.Td, {\n      children: element.cropName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table.Td, {\n      children: element.averageYield\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table.Td, {\n      children: element.averageArea\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, element.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(MantineProvider, {\n    children: [/*#__PURE__*/_jsxDEV(Switch, {\n      checked: showTables,\n      onChange: e => setShowTables(e.currentTarget.checked),\n      label: showTables ? 'Show min-max Production table ' : 'Show Crop Averages table'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), showTables ? /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(Table.Thead, {\n        children: /*#__PURE__*/_jsxDEV(Table.Tr, {\n          children: [/*#__PURE__*/_jsxDEV(Table.Th, {\n            children: \"Year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Table.Th, {\n            children: \"Crop with Maximum Production in that Year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Table.Th, {\n            children: \"Crop with Minimum Production in that Year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table.Tbody, {\n        children: maxMinProductionData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(Table.Thead, {\n        children: /*#__PURE__*/_jsxDEV(Table.Tr, {\n          children: [/*#__PURE__*/_jsxDEV(Table.Th, {\n            children: \"Crop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Table.Th, {\n            children: \"Average Yield of the Crop between 1950-2020\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Table.Th, {\n            children: \"Average Cultivation Area of the Crop between 1950-2020\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table.Tbody, {\n        children: cropAveragesData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7+J/yUKNLiaVeFxgfNRCKYsNOmo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Table","MantineProvider","Switch","data","jsxDEV","_jsxDEV","getMaxMinProductionByYear","years","Array","from","Set","map","item","Year","results","forEach","year","cropsInYear","filter","cropsWithProduction","crop","length","push","MaxCrop","MinCrop","onlyYear","split","trim","maxCrop","reduce","prev","curr","minCrop","calculateAverages","cropAverages","cropName","yieldValue","areaValue","yieldSum","yieldCount","areaSum","areaCount","Object","keys","averages","averageYield","averageArea","App","_s","maxMinProduction","showTables","setShowTables","console","log","maxMinProductionData","element","Tr","children","Td","fileName","_jsxFileName","lineNumber","columnNumber","name","cropAveragesData","checked","onChange","e","currentTarget","label","Thead","Th","Tbody","_c","$RefreshReg$"],"sources":["/Users/tarun/Documents/Table/my-react-app/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\nimport { Table, MantineProvider, Switch} from '@mantine/core';\nimport data from './data';\n\nconst getMaxMinProductionByYear = (data) => {\n  const years = Array.from(new Set(data.map(item => item.Year)));\n  const results = [];\n\n  years.forEach(year => {\n    const cropsInYear = data.filter(item => item.Year === year);\n    const cropsWithProduction = cropsInYear.filter(\n      crop => crop[\"Crop Production (UOM:t(Tonnes))\"] !== \"\"\n    );\n\n    if (cropsWithProduction.length === 0) {\n      results.push({\n        Year: year,\n        MaxCrop: \"N/A\",\n        MinCrop: \"N/A\"\n      });\n      return;\n    }\n\n    let onlyYear = year.split(\",\")[1].trim();\n\n    const maxCrop = cropsWithProduction.reduce((prev, curr) =>\n      prev[\"Crop Production (UOM:t(Tonnes))\"] > curr[\"Crop Production (UOM:t(Tonnes))\"] ? prev : curr\n    );\n\n    const minCrop = cropsWithProduction.reduce((prev, curr) =>\n      prev[\"Crop Production (UOM:t(Tonnes))\"] < curr[\"Crop Production (UOM:t(Tonnes))\"] ? prev : curr\n    );\n\n    results.push({\n      Year: onlyYear,\n      MaxCrop: maxCrop[\"Crop Name\"],\n      MinCrop: minCrop[\"Crop Name\"]\n    });\n  });\n\n  return results;\n};\n\nconst calculateAverages = (data) => {\n  const cropAverages = {};\n\n  data.forEach((item) => {\n    const cropName = item['Crop Name'];\n    const yieldValue = item['Yield Of Crops (UOM:Kg/Ha(KilogramperHectare))'];\n    const areaValue = item['Area Under Cultivation (UOM:Ha(Hectares))'];\n\n    if (!cropAverages[cropName]) {\n      cropAverages[cropName] = {\n        yieldSum: 0,\n        yieldCount: 0,\n        areaSum: 0,\n        areaCount: 0,\n      };\n    }\n\n    if (yieldValue) {\n      cropAverages[cropName].yieldSum += yieldValue;\n      cropAverages[cropName].yieldCount += 1;\n    }\n\n    if (areaValue) {\n      cropAverages[cropName].areaSum += areaValue;\n      cropAverages[cropName].areaCount += 1;\n    }\n  });\n\n  return Object.keys(cropAverages).map((crop) => {\n    const averages = cropAverages[crop];\n    return {\n      cropName: crop,\n      averageYield: averages.yieldCount ? averages.yieldSum / averages.yieldCount : 0,\n      averageArea: averages.areaCount ? averages.areaSum / averages.areaCount : 0,\n    };\n  });\n};\n\nfunction App() {\n  const maxMinProduction = getMaxMinProductionByYear(data);\n  const cropAverages = calculateAverages(data);\n  const [showTables, setShowTables] = useState(false);\n  console.log(showTables)\n\n  const maxMinProductionData = maxMinProduction.map((element) => (\n    <Table.Tr key={element.name}>\n      <Table.Td>{element.Year}</Table.Td>\n      <Table.Td>{element.MaxCrop}</Table.Td>\n      <Table.Td>{element.MinCrop}</Table.Td>\n    </Table.Tr>\n  ));\n\n  const cropAveragesData = cropAverages.map((element) => (\n    <Table.Tr key={element.name}>\n      <Table.Td>{element.cropName}</Table.Td>\n      <Table.Td>{element.averageYield}</Table.Td>\n      <Table.Td>{element.averageArea}</Table.Td>\n    </Table.Tr>\n  ));\n\n  return (\n    <MantineProvider>\n      <Switch\n        checked={showTables}\n        onChange={(e) => setShowTables(e.currentTarget.checked)}\n        label={showTables ? 'Show min-max Production table ' : 'Show Crop Averages table'}\n      />\n      {showTables ? (\n      <Table>\n        <Table.Thead>\n          <Table.Tr>\n            <Table.Th>Year</Table.Th>\n            <Table.Th>Crop with Maximum Production in that Year</Table.Th>\n            <Table.Th>Crop with Minimum Production in that Year</Table.Th>\n          </Table.Tr>\n        </Table.Thead>\n        <Table.Tbody>{maxMinProductionData}</Table.Tbody>\n      </Table> ) : (\n      <Table>\n        <Table.Thead>\n          <Table.Tr>\n            <Table.Th>Crop</Table.Th>\n            <Table.Th>Average Yield of the Crop between 1950-2020</Table.Th>\n            <Table.Th>Average Cultivation Area of the Crop between 1950-2020</Table.Th>\n          </Table.Tr>\n        </Table.Thead>\n        <Table.Tbody>{cropAveragesData}</Table.Tbody>\n      </Table> )}\n    </MantineProvider>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}