{"ast":null,"code":"var _jsxFileName = \"/Users/tarun/Documents/Table/my-react-app/src/App.js\";\nimport './App.css';\nimport React from 'react';\nimport { Table, MantineProvider } from '@mantine/core';\nimport data from './data';\n\n// const elements = [\n//   { position: 6, mass: 12.011, symbol: 'C', name: 'Carbon' },\n//   { position: 7, mass: 14.007, symbol: 'N', name: 'Nitrogen' },\n//   { position: 39, mass: 88.906, symbol: 'Y', name: 'Yttrium' },\n//   { position: 56, mass: 137.33, symbol: 'Ba', name: 'Barium' },\n//   { position: 58, mass: 140.12, symbol: 'Ce', name: 'Cerium' },\n// ];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getMaxMinProductionByYear = data => {\n  const years = Array.from(new Set(data.map(item => item.Year))); // Get unique years\n  const results = [];\n  years.forEach(year => {\n    const cropsInYear = data.filter(item => item.Year === year);\n    const cropsWithProduction = cropsInYear.filter(crop => crop[\"Crop Production (UOM:t(Tonnes))\"] !== \"\");\n    if (cropsWithProduction.length === 0) {\n      results.push({\n        Year: year,\n        MaxCrop: \"N/A\",\n        MinCrop: \"N/A\"\n      });\n      return;\n    }\n    const maxCrop = cropsWithProduction.reduce((prev, curr) => prev[\"Crop Production (UOM:t(Tonnes))\"] > curr[\"Crop Production (UOM:t(Tonnes))\"] ? prev : curr);\n    const minCrop = cropsWithProduction.reduce((prev, curr) => prev[\"Crop Production (UOM:t(Tonnes))\"] < curr[\"Crop Production (UOM:t(Tonnes))\"] ? prev : curr);\n    results.push({\n      Year: year,\n      MaxCrop: maxCrop[\"Crop Name\"],\n      MinCrop: minCrop[\"Crop Name\"]\n    });\n  });\n  return results;\n};\nfunction App() {\n  const maxMinProduction = getMaxMinProductionByYear(data);\n  const rows = maxMinProduction.map(element => /*#__PURE__*/_jsxDEV(Table.Tr, {\n    children: [/*#__PURE__*/_jsxDEV(Table.Td, {\n      children: element.Year\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table.Td, {\n      children: element.MaxCrop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table.Td, {\n      children: element.MinCrop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, element.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(MantineProvider, {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(Table.Thead, {\n        children: /*#__PURE__*/_jsxDEV(Table.Tr, {\n          children: [/*#__PURE__*/_jsxDEV(Table.Th, {\n            children: \"Year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Table.Th, {\n            children: \"Crop with Maximum \\\\n Production in that Year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Table.Th, {\n            children: \"Crop with Minimum Production in that Year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Table.Tbody, {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Table","MantineProvider","data","jsxDEV","_jsxDEV","getMaxMinProductionByYear","years","Array","from","Set","map","item","Year","results","forEach","year","cropsInYear","filter","cropsWithProduction","crop","length","push","MaxCrop","MinCrop","maxCrop","reduce","prev","curr","minCrop","App","maxMinProduction","rows","element","Tr","children","Td","fileName","_jsxFileName","lineNumber","columnNumber","name","Thead","Th","Tbody","_c","$RefreshReg$"],"sources":["/Users/tarun/Documents/Table/my-react-app/src/App.js"],"sourcesContent":["import './App.css';\nimport React from 'react';\nimport { Table, MantineProvider } from '@mantine/core';\nimport data from './data';\n\n// const elements = [\n//   { position: 6, mass: 12.011, symbol: 'C', name: 'Carbon' },\n//   { position: 7, mass: 14.007, symbol: 'N', name: 'Nitrogen' },\n//   { position: 39, mass: 88.906, symbol: 'Y', name: 'Yttrium' },\n//   { position: 56, mass: 137.33, symbol: 'Ba', name: 'Barium' },\n//   { position: 58, mass: 140.12, symbol: 'Ce', name: 'Cerium' },\n// ];\n\nconst getMaxMinProductionByYear = (data) => {\n  const years = Array.from(new Set(data.map(item => item.Year))); // Get unique years\n  const results = [];\n\n  years.forEach(year => {\n    const cropsInYear = data.filter(item => item.Year === year);\n    const cropsWithProduction = cropsInYear.filter(\n      crop => crop[\"Crop Production (UOM:t(Tonnes))\"] !== \"\"\n    );\n\n    if (cropsWithProduction.length === 0) {\n      results.push({\n        Year: year,\n        MaxCrop: \"N/A\",\n        MinCrop: \"N/A\"\n      });\n      return;\n    }\n\n    const maxCrop = cropsWithProduction.reduce((prev, curr) => \n      prev[\"Crop Production (UOM:t(Tonnes))\"] > curr[\"Crop Production (UOM:t(Tonnes))\"] ? prev : curr\n    );\n\n    const minCrop = cropsWithProduction.reduce((prev, curr) => \n      prev[\"Crop Production (UOM:t(Tonnes))\"] < curr[\"Crop Production (UOM:t(Tonnes))\"] ? prev : curr\n    );\n\n    results.push({\n      Year: year,\n      MaxCrop: maxCrop[\"Crop Name\"],\n      MinCrop: minCrop[\"Crop Name\"]\n    });\n  });\n\n  return results;\n};\n\nfunction App() {\n  const maxMinProduction = getMaxMinProductionByYear(data);\n\n  const rows = maxMinProduction.map((element) => (\n    <Table.Tr key={element.name}>\n      <Table.Td>{element.Year}</Table.Td>\n      <Table.Td>{element.MaxCrop}</Table.Td>\n      <Table.Td>{element.MinCrop}</Table.Td>\n    </Table.Tr>\n  ));\n\n  return (\n    <MantineProvider>\n    <Table>\n      <Table.Thead>\n        <Table.Tr>\n          <Table.Th>Year</Table.Th>\n          <Table.Th>Crop with Maximum \\n Production in that Year</Table.Th>\n          <Table.Th>Crop with Minimum Production in that Year</Table.Th>\n        </Table.Tr>\n      </Table.Thead>\n      <Table.Tbody>{rows}</Table.Tbody>\n    </Table>\n    </MantineProvider>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}